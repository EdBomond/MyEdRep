import pandas as pd
import numpy as np
import math
# старт программы
print(
    'Это программа расчета кожухотрубчатого испарителя ароматических углеводородов и кожухотрубчатого холодильника органических жидкостей'
)
print(
    'Введите исходные данные по теплообменному аппарату: его тип и нагреваемые/охлаждаемые среды'
)
type_ap = input('Выберите тип аппарата(холодильник/испаритель): ')
# Табличнные данные, госты и другое
# Таблицы с ГОСТами на теплообменные аппараты
#ГОСТ 15121-79 и 15119-79 на испарители. Таблица представлена в виде: диаметр кожуха, диаметр труб внеш, число ходов, общее количество трб, длина труб, площадь теплообмена, число сегментных перегородок,условный диаметр патрубков для труб и межтруб,
isparitel_600 = [[0, 0, 0, 0, 0, 0], [600, 20, 2, 370, 3, 70],
                 [600, 20, 2, 370, 4, 93], [600, 20, 2, 370, 6, 139],
                 [0, 0, 0, 0, 0, 0], [600, 20, 4, 334, 3, 63],
                 [600, 20, 4, 334, 4, 84], [600, 20, 4, 334, 6, 126],
                 [600, 20, 6, 316, 3, 60], [600, 20, 6, 316, 4, 79],
                 [600, 20, 6, 316, 6, 119], [0, 0, 0, 0, 0, 0],
                 [600, 25, 1, 257, 2, 40], [600, 25, 1, 257, 3, 61],
                 [600, 25, 1, 257, 4, 81], [0, 0, 0, 0, 0, 0],
                 [600, 25, 2, 240, 3, 57], [600, 25, 2, 240, 4, 75],
                 [600, 25, 2, 240, 6, 113], [0, 0, 0, 0, 0, 0],
                 [600, 25, 4, 206, 3, 49], [600, 25, 4, 206, 4, 65],
                 [600, 25, 4, 206, 6, 97], [0, 0, 0, 0, 0, 0],
                 [600, 25, 6, 196, 3, 46], [600, 25, 6, 196, 4, 61],
                 [600, 25, 6, 196, 6, 91]]
f_max_600 = 139
f_min_600 = 46
isparitel_800 = [[0, 0, 0, 0, 0, 0], [800, 20, 2, 690, 3, 130],
                 [800, 20, 2, 690, 4, 173], [800, 20, 2, 690, 6, 260],
                 [0, 0, 0, 0, 0, 0], [800, 20, 4, 638, 3, 120],
                 [800, 20, 4, 638, 4, 160], [800, 20, 4, 638, 6, 240],
                 [0, 0, 0, 0, 0, 0], [800, 20, 6, 618, 3, 116],
                 [800, 20, 6, 618, 4, 155], [800, 20, 6, 618, 6, 233],
                 [0, 0, 0, 0, 0, 0], [800, 25, 1, 465, 2, 73],
                 [800, 25, 1, 465, 3, 109], [800, 25, 1, 465, 4, 146],
                 [0, 0, 0, 0, 0, 0], [800, 25, 2, 442, 3, 104],
                 [800, 25, 2, 442, 4, 139], [800, 25, 2, 442, 6, 208],
                 [0, 0, 0, 0, 0, 0], [800, 25, 4, 404, 3, 95],
                 [800, 25, 4, 404, 4, 127], [800, 25, 4, 404, 6, 190],
                 [0, 0, 0, 0, 0, 0], [800, 25, 6, 384, 3, 90],
                 [800, 25, 6, 384, 4, 121], [800, 25, 6, 384, 6, 181]]
f_max_800 = 260
f_min_800 = 90
isparitel_1000 = [[1000, 20, 2, 1138, 3, 214], [1000, 20, 2, 1138, 4, 286],
                  [1000, 20, 2, 1138, 6, 429], [0, 0, 0, 0, 0, 0],
                  [1000, 20, 4, 1072, 3, 202], [1000, 20, 4, 1072, 4, 269],
                  [1000, 20, 4, 1072, 6, 404], [0, 0, 0, 0, 0, 0],
                  [1000, 20, 6, 1044, 3, 197], [1000, 20, 6, 1044, 4, 262],
                  [1000, 20, 6, 1044, 6, 393], [0, 0, 0, 0, 0, 0],
                  [1000, 25, 1, 747, 2, 117], [1000, 25, 1, 747, 3, 176],
                  [1000, 25, 1, 747, 4, 235], [0, 0, 0, 0, 0, 0],
                  [1000, 25, 2, 718, 3, 169], [1000, 25, 2, 718, 4, 226],
                  [1000, 25, 2, 718, 6, 338], [0, 0, 0, 0, 0, 0],
                  [1000, 25, 4, 666, 3, 157], [1000, 25, 4, 666, 4, 209],
                  [1000, 25, 4, 666, 6, 314], [0, 0, 0, 0, 0, 0],
                  [1000, 25, 6, 642, 3, 151], [1000, 25, 6, 642, 4, 202],
                  [1000, 25, 6, 642, 6, 302]]
f_max_1000 = 429
f_min_1000 = 151
isparitel_1200 = [[1200, 20, 2, 1658, 4, 417], [1200, 20, 2, 1658, 6, 625],
                  [0, 0, 0, 0, 0, 0], [1200, 20, 4, 1580, 4, 397],
                  [1200, 20, 4, 1580, 6, 595], [0, 0, 0, 0, 0, 0],
                  [1200, 20, 6, 1544, 4, 388], [1200, 20, 6, 1544, 6, 582],
                  [0, 0, 0, 0, 0, 0], [1200, 25, 1, 1083, 3, 256],
                  [1200, 25, 1, 1083, 4, 340], [0, 0, 0, 0, 0, 0],
                  [1200, 25, 2, 1048, 4, 329], [1200, 25, 2, 1048, 6, 494],
                  [0, 0, 0, 0, 0, 0], [1200, 25, 4, 986, 4, 310],
                  [1200, 25, 4, 986, 6, 464], [0, 0, 0, 0, 0, 0],
                  [1200, 25, 6, 958, 4, 301], [1200, 25, 6, 958, 6, 451]]
f_max_1200 = 625
f_min_1200 = 256
isparitel_1400 = [[1400, 20, 2, 2298, 6, 865], [1400, 20, 4, 2204, 6, 831],
                  [0, 0, 0, 0, 0, 0], [1400, 20, 6, 2162, 6, 816],
                  [1400, 25, 1, 1545, 3, 372], [1400, 25, 1, 1545, 4, 486],
                  [1400, 25, 2, 1504, 6, 708], [0, 0, 0, 0, 0, 0],
                  [1400, 25, 4, 1430, 6, 673], [1400, 25, 6, 1396, 6, 657]]
f_max_1400 = 865
f_min_1400 = 372
# ГОСТ на холодильники
# ГОСТ 15120-79 и на холодильники Таблица представлена в виде: диаметр кожуха, диаметр труб внеш, число ходов, общее количество труб, длина труб, площадь теплообмена.
holodilnik_600 = [[0, 0, 0, 0, 0, 0], [600, 20, 2, 370, 2, 47],
                  [600, 20, 2, 370, 3, 70], [600, 20, 2, 370, 4, 93],
                  [600, 20, 2, 370, 6, 139], [0, 0, 0, 0, 0, 0],
                  [600, 20, 4, 334, 2, 42], [600, 20, 4, 334, 3, 63],
                  [600, 20, 4, 334, 4, 84], [600, 20, 4, 334, 6, 126],
                  [0, 0, 0, 0, 0, 0], [600, 20, 6, 316, 2, 40],
                  [600, 20, 6, 316, 3, 60], [600, 20, 6, 316, 4, 79],
                  [600, 20, 6, 316, 6, 119], [0, 0, 0, 0, 0, 0],
                  [600, 25, 2, 240, 2, 38], [600, 25, 2, 240, 3, 57],
                  [600, 25, 2, 240, 4, 75], [600, 25, 2, 240, 6, 113],
                  [0, 0, 0, 0, 0, 0], [600, 25, 4, 206, 2, 32],
                  [600, 25, 4, 206, 3, 49], [600, 25, 4, 206, 4, 65],
                  [600, 25, 4, 206, 6, 97], [0, 0, 0, 0, 0, 0],
                  [600, 25, 6, 196, 2, 31], [600, 25, 6, 196, 3, 46],
                  [600, 25, 6, 196, 4, 61], [600, 25, 6, 196, 6, 91],
                  [600, 25, 6, 196, 9, 91]]
f_max_600_cold = 147
f_min_600_cold = 31
holodilnik_800 = [[800, 20, 2, 690, 2, 87], [800, 20, 2, 690, 3, 130],
                  [800, 20, 2, 690, 4, 173], [800, 20, 2, 690, 6, 260],
                  [800, 20, 2, 690, 9, 390], [0, 0, 0, 0, 0, 0],
                  [800, 20, 4, 638, 2, 80], [800, 20, 4, 638, 3, 120],
                  [800, 20, 4, 638, 4, 160], [800, 20, 4, 638, 6, 240],
                  [800, 20, 4, 638, 9, 361], [0, 0, 0, 0, 0, 0],
                  [800, 20, 6, 618, 2, 78], [800, 20, 6, 618, 3, 116],
                  [800, 20, 6, 618, 4, 155], [800, 20, 6, 618, 6, 233],
                  [800, 20, 6, 618, 9, 349], [0, 0, 0, 0, 0, 0],
                  [800, 25, 2, 442, 2, 69], [800, 25, 2, 442, 3, 104],
                  [800, 25, 2, 442, 4, 139], [800, 25, 2, 442, 6, 208],
                  [800, 25, 2, 442, 9, 312], [0, 0, 0, 0, 0, 0],
                  [800, 25, 4, 404, 2, 63], [800, 25, 4, 404, 3, 95],
                  [800, 25, 4, 404, 4, 127], [800, 25, 4, 404, 6, 190],
                  [800, 25, 4, 404, 9, 285], [0, 0, 0, 0, 0, 0],
                  [800, 25, 6, 384, 2, 60], [800, 25, 6, 384, 3, 90],
                  [800, 25, 6, 384, 4, 121], [800, 25, 6, 384, 6, 181],
                  [800, 25, 6, 384, 9, 271]]
f_max_800_cold = 405
f_min_800_cold = 60
holodilnik_1000 = [[1000, 20, 2, 1138, 3, 214], [1000, 20, 2, 1138, 4, 286],
                   [1000, 20, 2, 1138, 6, 429], [1000, 20, 2, 1138, 9, 643],
                   [0, 0, 0, 0, 0, 0], [1000, 20, 4, 1072, 3, 202],
                   [1000, 20, 4, 1072, 4, 269], [1000, 20, 4, 1072, 6, 404],
                   [1000, 20, 4, 1072, 9, 606], [0, 0, 0, 0, 0, 0],
                   [1000, 20, 6, 1044, 3, 197], [1000, 20, 6, 1044, 4, 262],
                   [1000, 20, 6, 1044, 6, 393], [1000, 20, 6, 1044, 9, 590],
                   [0, 0, 0, 0, 0, 0], [1000, 25, 2, 718, 3, 169],
                   [1000, 25, 2, 718, 4, 226], [1000, 25, 2, 718, 6, 338],
                   [1000, 25, 2, 718, 9, 507], [0, 0, 0, 0, 0, 0],
                   [1000, 25, 4, 666, 3, 157], [1000, 25, 4, 666, 4, 209],
                   [1000, 25, 4, 666, 6, 314], [1000, 25, 4, 666, 9, 471],
                   [0, 0, 0, 0, 0, 0], [1000, 25, 6, 642, 3, 151],
                   [1000, 25, 6, 642, 4, 202], [1000, 25, 6, 642, 6, 302],
                   [1000, 25, 6, 642, 6, 454]]
f_max_1000_cold = 663
f_min_1000_cold = 151
holodilnik_1200 = [[1200, 20, 2, 1658, 4, 417], [1200, 20, 2, 1658, 6, 625],
                   [1200, 20, 2, 1658, 9, 937], [0, 0, 0, 0, 0, 0],
                   [1200, 20, 4, 1580, 4, 397], [1200, 20, 4, 1580, 6, 595],
                   [1200, 20, 4, 1580, 6, 893], [0, 0, 0, 0, 0, 0],
                   [1200, 20, 6, 1544, 4, 388], [1200, 20, 6, 1544, 6, 582],
                   [1200, 20, 6, 1544, 9, 873], [0, 0, 0, 0, 0, 0],
                   [1200, 25, 2, 1048, 4, 329], [1200, 25, 2, 1048, 6, 494],
                   [1200, 25, 2, 1048, 6, 740], [0, 0, 0, 0, 0, 0],
                   [1200, 25, 4, 986, 4, 310], [1200, 25, 4, 986, 6, 464],
                   [1200, 25, 4, 986, 9, 697], [0, 0, 0, 0, 0, 0],
                   [1200, 25, 6, 958, 4, 301], [1200, 25, 6, 958, 6, 451],
                   [1200, 25, 6, 958, 9, 677]]
f_max_1200_cold = 961
f_min_1200_cold = 301
# Ф/Х свойства органический жидкосткий представлены в виде такой последовательности температура в цельсия, давление насыщ паров в Па, плотность в кг/м3, динам вязкость в па * с, теплоемкость в кДж/кг * K, уд. теплота парообразования кДж/кг, коэфф. теплопроводности Вт/м*K, коэфф поверх натяжения в Н/м, Pr
f_x_benzol = [[5.6, 4629, 893, 0.000782, 1690, 444600, 0.149, 0.0309, 8.87],
              [10, 6046, 888, 0.000730, 1710, 441600, 0.148, 0.0302, 8.42],
              [20, 9985, 878, 0.000639, 1730, 435300, 0.145, 0.0289, 7.65],
              [30, 15850, 868, 0.000563, 1760, 428900, 0.142, 0.0289, 6.99],
              [40, 24300, 858, 0.000499, 1790, 422400, 0.139, 0.0262, 6.44],
              [50, 36900, 847, 0.000444, 1820, 415700, 0.136, 0.0249, 5.96],
              [60, 52110, 837, 0.000396, 1850, 408800, 0.133, 0.0237, 5.54],
              [70, 73360, 826, 0.000356, 1890, 401700, 0.130, 0.0224, 5.19],
              [80, 100900, 815, 0.000320, 1920, 394400, 0.127, 0.0211, 4.87],
              [90, 136000, 804, 0.000290, 1960, 386900, 0.123, 0.0199, 4.60],
              [100, 179900, 793, 0.000263, 2000, 379200, 0.120, 0.0187, 4.37],
              [110, 233900, 781, 0.000239, 2040, 371300, 0.117, 0.0174, 4.16],
              [120, 299600, 769, 0.000218, 2080, 363000, 0.114, 0.0162, 3.98],
              [130, 378300, 757, 0.000200, 2130, 354500, 0.111, 0.0151, 3.82],
              [140, 471600, 744, 0.000183, 2170, 345600, 0.108, 0.0139, 3.68],
              [150, 581200, 731, 0.000168, 2220, 336300, 0.105, 0.0128, 3.56],
              [160, 708700, 717, 0.000155, 2270, 326600, 0.102, 0.0116, 3.46],
              [170, 856000, 703, 0.000143, 2320, 316500, 0.099, 0.0105, 3.36],
              [180, 1024000, 689, 0.000133, 2380, 305800, 0.096, 0.0094, 3.29],
              [200, 1434000, 658, 0.000115, 2490, 282500, 0.090, 0.0073, 3.17]]
f_x_toluol = [
    [-20, 230, 903.9, 0.001066, 1590, 435000, 0.143, 0.0333, 11.80],
    [-10, 473, 895.2, 0.000894, 1610, 430000, 0.141, 0.0321, 10.21],
    [0, 915, 886.4, 0.000766, 1630, 425000, 0.138, 0.0309, 9.02],
    [10, 1676, 877.5, 0.000666, 1660, 420000, 0.136, 0.0297, 8.12],
    [20, 2926, 868.5, 0.000588, 1680, 415000, 0.134, 0.0285, 7.41],
    [30, 4895, 859.4, 0.000524, 1710, 410000, 0.131, 0.0273, 6.84],
    [40, 7880, 850.1, 0.000471, 1740, 404000, 0.129, 0.0262, 6.37],
    [50, 12260, 840.7, 0.000426, 1770, 399000, 0.126, 0.025, 5.98],
    [60, 18480, 831.1, 0.000386, 1810, 393000, 0.124, 0.0238, 5.64],
    [70, 27090, 821.4, 0.000352, 1840, 387000, 0.121, 0.0227, 5.340],
    [80, 38730, 811.6, 0.000321, 1880, 381000, 0.119, 0.0216, 5.06],
    [90, 54110, 801.5, 0.000293, 1910, 375000, 0.117, 0.0205, 4.81],
    [100, 74030, 791.3, 0.000268, 1950, 369000, 0.114, 0.0193, 4.58],
    [110, 99380, 780.9, 0.000244, 1990, 363000, 0.112, 0.0183, 4.36],
    [120, 131100, 770.3, 0.000223, 2040, 356000, 0.109, 0.0172, 4.14],
    [130, 170300, 759.4, 0.000202, 2080, 349000, 0.107, 0.0161, 3.93],
    [140, 218000, 748.3, 0.000184, 2120, 342000, 0.104, 0.015, 3.74],
    [160, 343700, 725.2, 0.000150, 2220, 327000, 0.0996, 0.013, 3.34],
    [180, 518100, 700.7, 0.000121, 2320, 311000, 0.0947, 0.011, 2.96],
    [200, 752100, 674.6, 0.000096, 2430, 293000, 0.0899, 0.009, 2.59]
]
f_x_butilspirt = [
    [-20, 19, 841, 0.009982, 2070, 758000, 0.162, 0.0282, 128],
    [-10, 52, 833, 0.007021, 2130, 748000, 0.160, 0.0274, 93.5],
    [0, 130, 826, 0.005087, 2200, 738000, 0.158, 0.0265, 70.9],
    [10, 301, 818, 0.003783, 2280, 727000, 0.156, 0.0256, 55.2],
    [20, 649, 810, 0.002878, 2360, 716000, 0.154, 0.0248, 44.0],
    [30, 1316, 802, 0.002234, 2440, 705000, 0.152, 0.0239, 35.9],
    [40, 2525, 793, 0.001764, 2530, 693000, 0.150, 0.0231, 29.8],
    [50, 4612, 785, 0.001414, 2630, 680000, 0.148, 0.0222, 25.2],
    [60, 8053, 776, 0.001148, 2740, 667000, 0.146, 0.0214, 21.6],
    [70, 13500, 767, 0.000941, 2850, 654000, 0.144, 0.0205, 18.6],
    [80, 21800, 758, 0.000778, 2970, 640000, 0.142, 0.0197, 16.3],
    [90, 34050, 749, 0.000646, 3090, 626000, 0.140, 0.0188, 14.3],
    [100, 51570, 739, 0.000538, 3220, 611000, 0.138, 0.018, 12.6],
    [110, 75940, 730, 0.000448, 3360, 595000, 0.136, 0.0171, 11.1],
    [120, 109000, 720, 0.000448, 3500, 579000, 0.134, 0.0171, 11.7],
    [130, 152700, 709, 0.000448, 3650, 562000, 0.132, 0.0171, 12.4],
    [140, 209500, 699, 0.000448, 3800, 545000, 0.130, 0.0171, 13.1],
    [150, 281700, 687, 0.000200, 3960, 527000, 0.128, 0.0171, 6.2],
    [160, 371800, 676, 0.000157, 4130, 508000, 0.126, 0.0171, 5.2],
    [180, 616600, 651, 0.0000886, 4480, 467000, 0.121, 0.0171, 3.3],
    [200, 965300, 624, 0.0000420, 4860, 422000, 0.117, 0.0171, 1.7]
]
f_x_methanol = [
    [-20, 971, 831, 0.001114, 2320, 1273000, 0.213, 0.0256, 12.1],
    [-10, 2019, 822, 0.000923, 2350, 1254000, 0.210, 0.0249, 10.4],
    [0, 3947, 813, 0.0007774, 2400, 1236000, 0.207, 0.0241, 9],
    [10, 7308, 804, 0.0006644, 2450, 1216000, 0.204, 0.0234, 8],
    [20, 12890, 794, 0.0005755, 2500, 1196000, 0.201, 0.0226, 7.2],
    [30, 21780, 785, 0.0005044, 2560, 1176000, 0.199, 0.0218, 6.5],
    [40, 35410, 775, 0.0004467, 2630, 1155000, 0.196, 0.0210, 6.6],
    [50, 55620, 765, 0.0003995, 2700, 1133000, 0.193, 0.0202, 5.6],
    [60, 84700, 755, 0.0003603, 2780, 1111000, 0.190, 0.0193, 5.3],
    [70, 125400, 744, 0.0003276, 2870, 1088000, 0.187, 0.0184, 5],
    [80, 181100, 733, 0.0002999, 2960, 1064000, 0.185, 0.0175, 4.8],
    [90, 255600, 722, 0.0002764, 3050, 1039000, 0.182, 0.0165, 4.6],
    [100, 353300, 710, 0.0002562, 3160, 1013000, 0.179, 0.0156, 4.5],
    [110, 479400, 698, 0.0002388, 3260, 985200, 0.176, 0.0146, 4.4],
    [120, 639300, 685, 0.0002236, 3380, 956500, 0.173, 0.0136, 4.4],
    [130, 839500, 672, 0.0002104, 3500, 926200, 0.170, 0.0125, 4.3],
    [140, 1087000, 658, 0.0001988, 3630, 894400, 0.168, 0.0115, 4.3],
    [150, 1389000, 643, 0.0001886, 3760, 859900, 0.165, 0.0104, 4.3],
    [160, 1754000, 628, 0.0001795, 3890, 823200, 0.162, 0.00930, 4.3],
    [180, 2710000, 593, 0.0001642, 4190, 739900, 0.156, 0.00700, 4.4],
    [200, 4036000, 550, 0.000152, 4500, 636200, 0.151, 0.00460, 4.5]
]
# https://dpva.ru/Guide/GuideChemistry/PropertiesOfSolvent/OrganicSolventsBensole/
mr_benzol = 78
mr_tolyol = 92
mr_methanol = 32
mr_butanol = 74
mr_aqua = 18
# ф/х свойства насыщ водяного пара: давление паров, темп конденсации, плотность пара, уд. теплота парообразования, теплоемкость пара в пределах до 128.73 градусов, вязкость
f_x_steam_aqua = [[2000, 17.51, 0.015, 2460190, 1864.4, 0.00001],
                  [3000, 24.10, 0.022, 2444650, 1869.4, 0.00001],
                  [4000, 28.98, 0.029, 2433100, 1873.6, 0.00001],
                  [5000, 32.9, 0.035, 2423820, 1877.4, 0.00001],
                  [6000, 36.18, 0.042, 2416010, 1880.8, 0.00001],
                  [7000, 39.02, 0.049, 2409240, 1884, 0.00001],
                  [8000, 41.53, 0.055, 2403250, 1887.1, 0.00001],
                  [9000, 43.79, 0.062, 2397850, 1888.9, 0.00001],
                  [10000, 45.83, 0.068, 2392940, 1892.7, 0.00001],
                  [20000, 60.09, 0.131, 2358400, 1915.6, 0.000011],
                  [30000, 69.13, 0.191, 2336130, 1934.3, 0.000011],
                  [40000, 75.89, 0.25, 2319230, 1950.6, 0.000011],
                  [50000, 81.35, 0.309, 2305420, 1965.4, 0.000012],
                  [60000, 85.95, 0.366, 2293640, 1979, 0.000012],
                  [70000, 89.96, 0.423, 2283300, 1991.9, 0.000012],
                  [80000, 93.51, 0.479, 2274050, 2004, 0.000012],
                  [90000, 96.71, 0.535, 2265650, 2015.6, 0.000012],
                  [100000, 99.63, 0.59, 2257920, 2026.7, 0.000012],
                  [110000, 102.32, 0.645, 2250760, 2037.3, 0.000012],
                  [120000, 104.81, 0.7, 2244080, 2047.6, 0.000012],
                  [130000, 107.13, 0.755, 2237790, 2057.6, 0.000013],
                  [140000, 109.32, 0.809, 2231860, 2067.3, 0.000013],
                  [150000, 111.37, 0.863, 2226230, 2076.8, 0.000013],
                  [160000, 113.32, 0.916, 2220870, 2086, 0.000013],
                  [170000, 115.17, 0.97, 2215750, 2095, 0.000013],
                  [180000, 116.93, 1.023, 2210840, 2103.7, 0.000013],
                  [190000, 118.62, 1.076, 2206130, 2112.4, 0.000013],
                  [200000, 120.23, 1.129, 2201590, 2120.8, 0.000013],
                  [220000, 123.27, 1.235, 2192980, 2137.2, 0.000013],
                  [240000, 126.09, 1.34, 2184910, 2153.1, 0.000013],
                  [260000, 128.73, 1.444, 2177300, 2168.5, 0.000013]]
# ф/х свойства воды от 0 до 180 градусов, давление температура, плотность, теплоемкость, теплопроводность, вязкость, поверхностное натяжение, Pr
f_x_aqua = [[98100, 0, 1000, 4230, 0.551, 0.00179, 0.0756, 13.7],
            [98100, 10, 1000, 4190, 0.575, 0.00131, 0.0762, 9.52],
            [98100, 20, 998, 4190, 0.599, 0.001, 0.0727, 7.02],
            [98100, 30, 996, 4180, 0.618, 0.000804, 0.0712, 5.42],
            [98100, 40, 992, 4180, 0.634, 0.000657, 0.0697, 4.31],
            [98100, 50, 988, 4180, 0.648, 0.000549, 0.0677, 3.54],
            [98100, 60, 983, 4180, 0.659, 0.00047, 0.0662, 2.98],
            [98100, 70, 978, 4190, 0.668, 0.000406, 0.0643, 2.55],
            [98100, 80, 972, 4190, 0.675, 0.000355, 0.0626, 2.21],
            [98100, 90, 965, 4190, 0.68, 0.000315, 0.0607, 1.95],
            [101043, 100, 958, 4230, 0.683, 0.000282, 0.0589, 1.75],
            [143226, 110, 951, 4230, 0.685, 0.000256, 0.0569, 1.58],
            [198162, 120, 943, 4230, 0.686, 0.000231, 0.0549, 1.43],
            [269775, 130, 935, 4270, 0.686, 0.000212, 0.0529, 1.2],
            [361008, 140, 926, 4270, 0.685, 0.000196, 0.0507, 1.23],
            [475785, 150, 917, 4320, 0.684, 0.000185, 0.0487, 1.17],
            [618030, 160, 907, 4360, 0.683, 0.000174, 0.0466, 1.1],
            [792648, 170, 897, 4400, 0.679, 0.000163, 0.0444, 1.05],
            [1003563, 180, 887, 4440, 0.675, 0.000153, 0.0424, 1.01]]

if type_ap in ['Испаритель', 'испаритель']:
    # задаем необхожимые величины для расчета испарителя
    q_pere = 0
    s_tube = 0.002
    k_steal = 17.5
    d_tube_all = []
    l_tube_all = []
    d_600 = 600
    d_800 = 800
    d_1000 = 1000
    d_1200 = 1200
    d_1400 = 1400
    f_600 = []
    f_800 = []
    f_1000 = []
    f_1200 = []
    f_1400 = []
    f_start = []
    k_peredacha = 1400
    k_peredacha_rashet = 0
    t_isp = 0
    r_isp = 0
    plot_isp = 0
    viz_plot = 0
    c_isp = 0
    provod_isp = 0
    natih_isp = 0
    plot_steam_norm = 0
    plot_steam_zad = 0
    r_steam = 0
    plot_steam = 0
    plot_con = 0
    viz_steam = 0
    viz_con = 0
    c_con = 0
    provod_con = 0
    # Ввод данных из задания на курсовой проект в необходимых ед. измерения
    isp_solvent = input('Введите название испаряемой среды (толуол/бензол): ' or 'толуол')
    g_isp_solvent = float(
        input('Введите расход по испаряемой среде в т/час через точку: '))
    g_isp_solvent_kgs = (g_isp_solvent * 1000) / 3600
    start_temp_isp = float(
        input(
            'Введите начальную температуру испаряемой среды в \u00B0С через точку: '
        ))
    p_isp_steam = float(
        input(
            'Введите значение давления насыщенных паров через точку в МПа (i.ii): '
        ))
    p_isp_steam_Pa = p_isp_steam * 10**6
    print(
        'В виде охлаждаемой среды, которая подводит тепло для испарения, используется насыщенный водяной пар, характеристики которого будут определены позже'
    )
    print('Исходные данные: ')
    # Вывод данных в виде таблицы
    numeric_isp = [
        isp_solvent, g_isp_solvent_kgs, start_temp_isp, p_isp_steam_Pa
    ]
    points_isp = [
        'Испаряемое вещество', 'Расход испаряемого вещества в кг/с',
        'Начальная температура испаряемой среды в \u00B0С',
        'Заданное давление насыщенных паров в Па'
    ]
    isp = pd.DataFrame(list(zip(points_isp, numeric_isp)),
                       columns=['Пункт', 'Значение'])
    print(isp)
    # расчет свойств испаряемого агента
    print(
        'Сейчас будут рассчитаны физические свойства теплоносителей при указанных условиях: '
    )
    if isp_solvent in ['бензол', 'Бензол']:
        print('Расчет физических свойств Бензола: ')
        if p_isp_steam_Pa < min([p[1]
                                 for p in f_x_benzol]) or p_isp_steam_Pa > max(
                                     [p[1] for p in f_x_benzol]):
            print('Расчет свойств невозможен, подберите другое давление паров')
        else:
            for a, b in enumerate(f_x_benzol):
                if p_isp_steam_Pa == f_x_benzol[a][1]:
                    t_isp = f_x_benzol[a][0]
                    r_isp = f_x_benzol[a][
                        5]  # Если величина является табличной, то выбираем из имеющейся
                    plot_isp = f_x_benzol[a][2]
                    viz_plot = f_x_benzol[a][3]
                    c_isp = f_x_benzol[a][4]
                    provod_isp = f_x_benzol[a][6]
                    natih_isp = f_x_benzol[a][7]
                    plot_steam_norm = (mr_benzol * 101325) / (8.314 * 1000 *
                                                              (t_isp + 273))
                    plot_steam_zad = (mr_benzol *
                                      p_isp_steam_Pa) / (8.314 * 1000 *
                                                         (t_isp + 273))
# Если величина лежит между значениями - линейная интерпполяция
                elif p_isp_steam_Pa > f_x_benzol[a][
                        1] and p_isp_steam_Pa < f_x_benzol[a + 1][1]:
                    t_isp = f_x_benzol[a][0] + (
                        (f_x_benzol[a + 1][0] - f_x_benzol[a][0]) /
                        (f_x_benzol[a + 1][1] - f_x_benzol[a][1])) * (
                            p_isp_steam_Pa - f_x_benzol[a][1])
                    r_isp = f_x_benzol[a][5] + (
                        (f_x_benzol[a + 1][5] - f_x_benzol[a][5]) /
                        (f_x_benzol[a + 1][1] - f_x_benzol[a][1])) * (
                            p_isp_steam_Pa - f_x_benzol[a][1])
                    plot_isp = f_x_benzol[a][2] + (
                        (f_x_benzol[a + 1][2] - f_x_benzol[a][2]) /
                        (f_x_benzol[a + 1][1] - f_x_benzol[a][1])) * (
                            p_isp_steam_Pa - f_x_benzol[a][1])
                    viz_plot = f_x_benzol[a][3] + (
                        (f_x_benzol[a + 1][3] - f_x_benzol[a][3]) /
                        (f_x_benzol[a + 1][1] - f_x_benzol[a][1])) * (
                            p_isp_steam_Pa - f_x_benzol[a][1])
                    c_isp = f_x_benzol[a][4] + (
                        (f_x_benzol[a + 1][4] - f_x_benzol[a][4]) /
                        (f_x_benzol[a + 1][1] - f_x_benzol[a][1])) * (
                            p_isp_steam_Pa - f_x_benzol[a][1])
                    provod_isp = f_x_benzol[a][6] + (
                        (f_x_benzol[a + 1][6] - f_x_benzol[a][6]) /
                        (f_x_benzol[a + 1][1] - f_x_benzol[a][1])) * (
                            p_isp_steam_Pa - f_x_benzol[a][1])
                    natih_isp = f_x_benzol[a][7] + (
                        (f_x_benzol[a + 1][7] - f_x_benzol[a][7]) /
                        (f_x_benzol[a + 1][1] - f_x_benzol[a][1])) * (
                            p_isp_steam_Pa - f_x_benzol[a][1])
                    plot_steam_norm = (mr_benzol * 101325) / (8.314 * 1000 *
                                                              (t_isp + 273))
                    plot_steam_zad = (mr_benzol *
                                      p_isp_steam_Pa) / (8.314 * 1000 *
                                                         (t_isp + 273))
    elif isp_solvent in ['Толуол', 'толуол']:
        print('Расчет физических свойств Толуола: ')
        if p_isp_steam_Pa < min([p[1]
                                 for p in f_x_toluol]) or p_isp_steam_Pa > max(
                                     [p[1] for p in f_x_toluol]):
            print('Расчет свойств невозможен, подберите другое давление паров')
        else:
            for a, b in enumerate(f_x_toluol):
                if p_isp_steam_Pa == f_x_toluol[a][1]:
                    t_isp = f_x_toluol[a][0]
                    r_isp = f_x_toluol[a][5]
                    plot_isp = f_x_toluol[a][2]
                    viz_plot = f_x_toluol[a][3]
                    c_isp = f_x_toluol[a][4]
                    provod_isp = f_x_toluol[a][6]
                    natih_isp = f_x_toluol[a][7]
                    plot_steam_norm = (mr_tolyol * 101325) / (8.314 * 1000 *
                                                              (t_isp + 273))
                    plot_steam_zad = (mr_tolyol *
                                      p_isp_steam_Pa) / (8.314 * 1000 *
                                                         (t_isp + 273))
                elif p_isp_steam_Pa > f_x_toluol[a][
                        1] and p_isp_steam_Pa < f_x_toluol[a + 1][1]:
                    t_isp = f_x_toluol[a][0] + (
                        (f_x_toluol[a + 1][0] - f_x_toluol[a][0]) /
                        (f_x_toluol[a + 1][1] - f_x_toluol[a][1])) * (
                            p_isp_steam_Pa - f_x_toluol[a][1])
                    r_isp = f_x_toluol[a][5] + (
                        (f_x_toluol[a + 1][5] - f_x_toluol[a][5]) /
                        (f_x_toluol[a + 1][1] - f_x_toluol[a][1])) * (
                            p_isp_steam_Pa - f_x_toluol[a][1])
                    plot_isp = f_x_benzol[a][2] + (
                        (f_x_toluol[a + 1][2] - f_x_toluol[a][2]) /
                        (f_x_toluol[a + 1][1] - f_x_toluol[a][1])) * (
                            p_isp_steam_Pa - f_x_toluol[a][1])
                    viz_plot = f_x_benzol[a][3] + (
                        (f_x_toluol[a + 1][3] - f_x_toluol[a][3]) /
                        (f_x_toluol[a + 1][1] - f_x_toluol[a][1])) * (
                            p_isp_steam_Pa - f_x_toluol[a][1])
                    c_isp = f_x_benzol[a][4] + (
                        (f_x_toluol[a + 1][4] - f_x_toluol[a][4]) /
                        (f_x_toluol[a + 1][1] - f_x_toluol[a][1])) * (
                            p_isp_steam_Pa - f_x_toluol[a][1])
                    provod_isp = f_x_benzol[a][6] + (
                        (f_x_toluol[a + 1][6] - f_x_toluol[a][6]) /
                        (f_x_toluol[a + 1][1] - f_x_toluol[a][1])) * (
                            p_isp_steam_Pa - f_x_toluol[a][1])
                    natih_isp = f_x_benzol[a][7] + (
                        (f_x_toluol[a + 1][7] - f_x_toluol[a][7]) /
                        (f_x_toluol[a + 1][1] - f_x_toluol[a][1])) * (
                            p_isp_steam_Pa - f_x_toluol[a][1])
                    plot_steam_norm = (mr_tolyol * 101325) / (8.314 * 1000 *
                                                              (t_isp + 273))
                    plot_steam_zad = (mr_tolyol *
                                      p_isp_steam_Pa) / (8.314 * 1000 *
                                                         (t_isp + 273))
# вывод данных в виде таблицы
    numeric_isp_ras = [
        t_isp, r_isp, plot_isp, viz_plot, c_isp, provod_isp, natih_isp,
        plot_steam_norm, plot_steam_zad
    ]
    points_isp_ras = [
        'Температура конденсации, \u00B0С', 'r, Дж/кг',
        'Плотность, кг/м\u00B3', 'Вязкость, Па*с', 'с, Дж/кг*K',
        'Теплопроводность, Вт/м*K', 'Поверх. натяжение, Н/м',
        'Плотность паров при н.у., кг/м\u00B3',
        'Плотность паров при заданных условиях, кг/м\u00B3'
    ]
    ras = pd.DataFrame(list(zip(points_isp_ras, numeric_isp_ras)),
                       columns=['Пункт', 'Значение'])
    print(ras)
    # Расчет ф/х свойств пара и конденсата по принятой сред. разности темп теплоносителей
    print(
        'Примем разность температур между конденсирующимся водяным паром и кипящей органической жидкостью 15 \u00B0С'
    )
    t_steam = t_isp + 15
    print('Тогда температура конденсирующего пара составит: ', t_steam)
    print('Рассчитаем физические свойства пара и конденсирующейся воды: ')
    for d, e in enumerate(f_x_steam_aqua):
        if t_steam == f_x_steam_aqua[d][1]:
            r_steam = f_x_steam_aqua[d][3]
            plot_steam = f_x_steam_aqua[d][2]
            viz_steam = f_x_steam_aqua[d][5]
        elif t_steam > f_x_steam_aqua[d][1] and t_steam < f_x_steam_aqua[d +
                                                                         1][1]:
            r_steam = f_x_steam_aqua[d][3] + (
                (f_x_steam_aqua[d + 1][3] - f_x_steam_aqua[d][3]) /
                (f_x_steam_aqua[d + 1][1] - f_x_steam_aqua[d][1])) * (
                    t_steam - f_x_steam_aqua[d][1])
            plot_steam = f_x_steam_aqua[d][2] + (
                (f_x_steam_aqua[d + 1][2] - f_x_steam_aqua[d][2]) /
                (f_x_steam_aqua[d + 1][1] - f_x_steam_aqua[d][1])) * (
                    t_steam - f_x_steam_aqua[d][1])
            viz_steam = f_x_steam_aqua[d][5] + (
                (f_x_steam_aqua[d + 1][5] - f_x_steam_aqua[d][5]) /
                (f_x_steam_aqua[d + 1][1] - f_x_steam_aqua[d][1])) * (
                    t_steam - f_x_steam_aqua[d][1])
    for t, r in enumerate(f_x_aqua):
        if t_steam == f_x_aqua[t][1]:
            plot_con = f_x_aqua[t][2]
            viz_con = f_x_aqua[t][5]
            c_con = f_x_aqua[t][3]
            provod_con = f_x_aqua[t][4]
        elif t_steam > f_x_aqua[t][1] and t_steam < f_x_aqua[t + 1][1]:
            plot_con = f_x_aqua[t][2] + (
                (f_x_aqua[t + 1][2] - f_x_aqua[t][2]) /
                (f_x_aqua[t + 1][1] - f_x_aqua[t][1])) * (t_steam -
                                                          f_x_aqua[t][1])
            viz_con = f_x_aqua[t][5] + (
                (f_x_aqua[t + 1][5] - f_x_aqua[t][5]) /
                (f_x_aqua[t + 1][1] - f_x_aqua[t][1])) * (t_steam -
                                                          f_x_aqua[t][1])
            c_con = f_x_aqua[t][3] + (
                (f_x_aqua[t + 1][3] - f_x_aqua[t][3]) /
                (f_x_aqua[t + 1][1] - f_x_aqua[t][1])) * (t_steam -
                                                          f_x_aqua[t][1])
            provod_con = f_x_aqua[t][4] + (
                (f_x_aqua[t + 1][4] - f_x_aqua[t][4]) /
                (f_x_aqua[t + 1][1] - f_x_aqua[t][1])) * (t_steam -
                                                          f_x_aqua[t][1])
    numeric_aqua = [r_steam, plot_steam, viz_steam]
    points_aqua = [
        'Теплота парообразования, Дж/кг', 'Плотность пара кг/м\u00B3',
        'Вязкость пара, Па*с'
    ]
    steam = pd.DataFrame(list(zip(points_aqua, numeric_aqua)),
                         columns=['Пункт', 'Значение'])
    print(steam)
    numeric_aqua_2 = [plot_con, viz_con, c_con, provod_con]
    points_aqua_2 = [
        'Плотность конденсата кг/м\u00B3', 'Вязкость конденсата, Па*с',
        'Теплоемкость, Дж/кг*K', 'Тепловпродность, Вт/м*K'
    ]
    steam_2 = pd.DataFrame(list(zip(points_aqua_2, numeric_aqua_2)),
                           columns=['Пункт', 'Значение'])
    print(steam_2)
    # Тепловой расчет
    print(
        'Проведем тепловой расчет, поэтому рассчитаем теплоту необходимую на нагревание до темп. кипения и испарения: '
    )
    heat_isp = (g_isp_solvent_kgs * c_isp *
                (t_isp - start_temp_isp)) + (g_isp_solvent_kgs * r_isp)
    print('Необходимое количества тепла на нагревание и испарение: ', heat_isp,
          'Вт')
    print(
        'Определим расход греющего пара исходя из равновесия теплового баланса'
    )
    g_steam_aqua = heat_isp / r_steam
    print('Расход греющего пара составляет: ', g_steam_aqua, 'кг/с')
    print(
        'Примем ориентировачный коэффициент теплопередачи от конденсирующего пара к кипящей органической жидкости K =',
        k_peredacha, 'Вт/м\u00B2 * K')
    f_start = heat_isp / (k_peredacha * 15)
    print('Ориентировочная площадь теплообмена составила: ', f_start,
          'м\u00B2')
    #  Выбор площади теплоообмена из стандартных
    print(
        'Выберем наиболее подходящий теплообменные аппараты из стандартных по ГОСТ 15121-79 и 15119-79: '
    )
    for g, h in enumerate(isparitel_600):
        if f_start > isparitel_600[g][5] and f_start < isparitel_600[
                g + 1][5] and f_start < f_max_600:
            f_6 = isparitel_600[g + 1][5]
            l_6 = isparitel_600[g + 1][4]
            f_600.append(f_6)
            l_tube_all.append(l_6)
            d_6 = isparitel_600[g + 1][1]
            d_tube_all.append(d_6)
        else:
            pass
    print('Площадь по гост составит: ', f_600, 'м\u00B2 и диаметром кожуха',
          d_600, 'мм')
    for t, y in enumerate(isparitel_800):
        if f_start > isparitel_800[t][5] and f_start < isparitel_800[
                t + 1][5] and f_start < f_max_800:
            f_8 = isparitel_800[t + 1][5]
            f_800.append(f_8)
            l_8 = isparitel_800[t + 1][4]
            l_tube_all.append(l_8)
            d_8 = isparitel_600[t + 1][1]
            d_tube_all.append(d_8)
        else:
            pass
    print('Площадь по гост составит: ', f_800, 'м\u00B2 и диаметром кожуха',
          d_800, 'мм')
    for u, i in enumerate(isparitel_1000):
        if f_start > isparitel_1000[u][5] and f_start < isparitel_1000[
                u + 1][5] and f_start < f_max_1000:
            f_10 = isparitel_1000[u + 1][5]
            f_1000.append(f_10)
            l_10 = isparitel_1000[u + 1][4]
            l_tube_all.append(l_10)
            d_10 = isparitel_600[u + 1][1]
            d_tube_all.append(d_10)
        else:
            pass
    print('Площадь по гост составит: ', f_1000, 'м\u00B2 и диаметром кожуха',
          d_1000, 'мм')
    for o, p in enumerate(isparitel_1200):
        if f_start > isparitel_1200[o][5] and f_start < isparitel_1200[
                o + 1][5] and f_start < f_max_1200:
            f_12 = isparitel_1200[o + 1][5]
            f_1200.append(f_12)
            l_12 = isparitel_1200[o + 1][4]
            l_tube_all.append(l_12)
            d_12 = isparitel_600[o + 1][1]
            d_tube_all.append(d_12)
        else:
            pass
    print('Площадь по гост составит: ', f_1200, 'м\u00B2 и диаметром кожуха',
          d_1200, 'мм')
    for q, w in enumerate(isparitel_1400):
        if f_start > isparitel_1400[q][5] and f_start < isparitel_1400[
                q + 1][5] and f_start < f_max_1400:
            f_14 = isparitel_1000[q + 1][5]
            f_1400.append(f_14)
            l_14 = isparitel_1400[q + 1][4]
            l_tube_all.append(l_14)
            d_14 = isparitel_600[q + 1][1]
            d_tube_all.append(d_14)
        else:
            break
    print('Площадь по гост составит: ', f_1400, 'м\u00B2 и диаметром кожуха',
          d_1400, 'мм')
    f_isp_all = f_600 + f_800 + f_1000 + f_1200 + f_1400
    f_isp_all_fl = list(np.float_(f_isp_all))
    l_tube_all_fl = list(np.float_(l_tube_all))
    d_tube_all_fl = list((np.float_(d_tube_all)))
    l_and_f_and_d = pd.DataFrame(
        list(zip(f_isp_all_fl, l_tube_all_fl, d_tube_all_fl)),
        columns=['Площадь, м\u00B2', 'Длина труб, м', 'Диаметр трубок, мм'])
    print(l_and_f_and_d)
    lo_fr = [list(i) for i in zip(f_isp_all_fl, l_tube_all_fl)]
    # Отбираем по тепловой нагрзуке наиболее оптимальные
    print('Отберем из выбранных теплообменников оптимальные')
    print(
        'Теплообменные трубки при расчете используется стальный с коэффициентом теплоотдачи: ',
        k_steal, 'Вт/м*К и толщиной: ', s_tube, 'м')
    print(
        'Если вам необходимы другие трубки, то введите коэффициент теплоотдачи'
    )
    type_tube = input(
        'Если вам не нужно изменять материал труб, то напишите сталь, в других случаях напишите другое: '
    )
    if type_tube in ['Сталь', 'сталь']:
        k_new = k_steal
        s_new = s_tube
    elif type_tube in ['Другое', 'другое']:
        k_new = float(input('Введите коэффициент теплоотдачи в Вт/м*К: '))
        s_new = float(input('Введите толщину трубок в м: '))
    else:
        print('Расчет невозможен введите все значчения заново')
    koff_b = 780 * ((provod_isp**1.3 * plot_isp**0.5 * plot_steam_zad**0.06) /
                    (natih_isp**0.5 * r_isp**0.6 * plot_steam_norm**0.66 *
                     c_isp**0.3 * viz_con**0.3))
    q_start_spisok = []
    spisok_kof_a = []
    symm_soprot = s_new / k_new + 1 / 5800 + 1 / 11600
    for a, b in enumerate(lo_fr):
        q_start = heat_isp / lo_fr[a][0]
        q_start_spisok.append(q_start)
        koff_a = 1.21 * provod_con * ((plot_con**2 * r_steam * 9.81) /
                                      (viz_con * lo_fr[a][1]))**(1 / 3)
        spisok_kof_a.append(koff_a)
    q_start_spisok_fl = list(np.float_(q_start_spisok))
    spisok_kof_a_fl = list(np.float_(spisok_kof_a))
    q_start_kof_a = [list(i) for i in zip(q_start_spisok_fl, spisok_kof_a_fl)]
    delta_all = []
    for a, b in enumerate(q_start_kof_a):
        znach_1 = 1 / q_start_kof_a[a][1] * q_start_kof_a[a][0]**(
            4 / 3) + symm_soprot * q_start_kof_a[a][
                0] + 1 / koff_b * q_start_kof_a[a][0]**0.4 - 15
        delta_all.append(znach_1)
# выборка наиболее благоприятных вариантов
    final = [
        list(i) for i in zip(f_isp_all_fl, l_tube_all_fl, d_tube_all_fl,
                             q_start_spisok_fl, delta_all)
    ]
    final = [elem for elem in final if elem[4] < 10]
    final = [elem for elem in final if elem[4] > 0]
    s = []
    l = []
    d_fin = []
    q_fin = []
    delta = []
    for a, b in enumerate(final):
        s.append(final[a][0])
        l.append(final[a][1])
        d_fin.append(final[a][2])
        q_fin.append(final[a][3])
        delta.append(final[a][4])
    last = pd.DataFrame(list(zip(s, l, d_fin, q_fin, delta)),
                        columns=[
                            'Площадь, м\u00B2', 'Длина труб, м',
                            'Диаметр трубок, мм', 'Тепловая нагрузка',
                            'Разница между ∆t сред.'
                        ])
    print(last)
    print('Дальше необходимо провести уточненный расчет тепловой нагрузки')

# Холодильники расчет
elif type_ap in ['Холодильник', 'холодильник']:
    # задаем необхожимые величины для расчета
    plot_cold = 0
    viz_cold = 0
    teploprovod_cold = 0
    c_cold = 0
    plot_aqua = 0
    viz_aqua = 0
    teploprovod_aqua = 0
    c_aqua = 0
    sred_temp = 0
    t_sred_cold = 0
    t_sred_aqua = 0
    s_tube = 0.002
    k_steal = 17.5
    d_tube_all_cold = []
    l_tube_all_cold = []
    d_600 = 600
    d_800 = 800
    d_1000 = 1000
    d_1200 = 1200
    d_1400 = 1400
    f_600 = []
    f_800 = []
    f_1000 = []
    f_1200 = []
    f_1400 = []
    f_start = []
    # Ввод условий из заданий
    cold_solvent = input(
        'Введите название охлаждаемой среды (метиловый спирт/толуол/бутиловый спирт): '
    )
    g_cold_solvent = float(
        input('Введите расход по охлаждаемой среде в т/час через точку: '))
    g_cold_solvent_kgs = (g_cold_solvent * 1000) / 3600
    start_temp_cold = float(
        input('Введите начальную температуру охлаждаемой среды в \u00B0С: '))
    finish_temp_cold = float(
        input('Введите конечную температуру охлаждаемой среды в \u00B0С: '))
    start_p_cold_steam = float(
        input(
            'Введите значение  давления на входе через точку в Мпа (i.ii): '))
    start_p_cold_steam_Pa = start_p_cold_steam * 10**6
    waste_cold_steam = float(
        input(
            'Введите значения давления насыщенных паров, которые могут быть потерянычерез точку в Мпа (i.ii): '
        ))
    waste_cold_steam_Pa = waste_cold_steam * 10**6
    print(
        'Нагревательной средой служит вода, необходимо вписать ее начальную температуру и конечную'
    )
    t_start_aqua_cold = float(
        input('Введите начальную температуру воды в \u00B0С: '))
    t_finish_aqua_cold = float(
        input('Введите конечную температуру воды в \u00B0С: '))
    numeric_cold = [
        cold_solvent, g_cold_solvent_kgs, start_temp_cold, finish_temp_cold,
        start_p_cold_steam_Pa, waste_cold_steam_Pa, t_start_aqua_cold,
        t_finish_aqua_cold
    ]
    points_cold = [
        'Охлаждаемая среда', 'Расход по охлаждаемой среде в кг/с',
        'Начальная темп. охлаждаемой среды в \u00B0С',
        'Конечная темп. охлаждаемой среды в \u00B0С ',
        'Начальное давление насыщенных паров в Па', 'Потери в Па',
        'Начальная температура воды в \u00B0С',
        'Конечная температура воды в в \u00B0С'
    ]
    cold = pd.DataFrame(list(zip(points_cold, numeric_cold)),
                        columns=['Пункт', 'Значение'])
    print(cold)
    # Определение температур теплоносителей
    print('Проведем тепловой расчет. Начнем с температурной схемы.')
    print(
        'Теплообменник будет работать в противоточном режиме, температурная схема: '
    )
    print(start_temp_cold, ' ---->', finish_temp_cold)
    print(t_finish_aqua_cold, '<----', t_start_aqua_cold)
    t_bol = start_temp_cold - t_finish_aqua_cold
    t_min = abs(finish_temp_cold - t_start_aqua_cold)
    print('Большая разница температура в \u00B0С: ', t_bol)
    print('Меньшая разница температур в \u00B0С: ', t_min)
    delta_temp = t_bol / t_min
    if delta_temp <= 2:
        sred_temp = (t_bol + t_min) / 2
    elif delta_temp > 2:
        sred_temp = (t_bol - t_min) / (2.3 * (math.log10(t_bol / t_min)))
    print(
        'Средняя разница температур теплоносителей в момент теплообмена в \u00B0С: ',
        sred_temp)
    print('Определим среднюю температуру охлаждаемой среды')
    t_sred_cold = (start_temp_cold + finish_temp_cold) / 2
    print('Средняя температура охлаждаемой среды в \u00B0С: ', t_sred_cold)
    t_sred_aqua = (t_start_aqua_cold + t_finish_aqua_cold) / 2
    print('Средняя температура нагеваемой среды в \u00B0С: ', t_sred_aqua)
    numeric_temp = [t_bol, t_min, sred_temp, t_sred_cold, t_sred_aqua]
    points_temp = [
        'Большая разница температура в \u00B0С',
        'Меньшая разница температур в \u00B0С',
        'Средняя разница температур теплоносителей в момент теплообмена в \u00B0С',
        'Средняя температура охлаждаемой среды в \u00B0С',
        'Средняя температура нагеваемой среды в \u00B0С'
    ]
    temp = pd.DataFrame(list(zip(points_temp, numeric_temp)),
                        columns=['Пункт', 'Значение'])
    print(temp)
    # Определение ф/х свойтсв охлаждаемой среды
    print('Рассчитаем физические характеристики теплоносителей: ')
    if cold_solvent in [
            'Бутиловый', 'Бутанола', 'Бутиловый спирт', 'бутиловый спирт',
            'бутиловый'
    ]:
        for a, b in enumerate(f_x_butilspirt):
            if t_sred_cold == f_x_butilspirt[a][0]:
                plot_cold = f_x_butilspirt[a][2]
                viz_cold = f_x_butilspirt[a][3]
                teploprovod_cold = f_x_butilspirt[a][6]
                c_cold = f_x_butilspirt[a][4]
            elif t_sred_cold > f_x_butilspirt[a][
                    0] and t_sred_cold < f_x_butilspirt[a + 1][0]:
                plot_cold = f_x_butilspirt[a][2] + (
                    (f_x_butilspirt[a + 1][2] - f_x_butilspirt[a][2]) /
                    (f_x_butilspirt[a + 1][0] - f_x_butilspirt[a][0])) * (
                        t_sred_cold - f_x_butilspirt[a][0])
                viz_cold = f_x_butilspirt[a][3] + (
                    (f_x_butilspirt[a + 1][3] - f_x_butilspirt[a][3]) /
                    (f_x_butilspirt[a + 1][0] - f_x_butilspirt[a][0])) * (
                        t_sred_cold - f_x_butilspirt[a][0])
                teploprovod_cold = f_x_butilspirt[a][6] + (
                    (f_x_butilspirt[a + 1][6] - f_x_butilspirt[a][6]) /
                    (f_x_butilspirt[a + 1][0] - f_x_butilspirt[a][0])) * (
                        t_sred_cold - f_x_butilspirt[a][0])
                c_cold = f_x_butilspirt[a][4] + (
                    (f_x_butilspirt[a + 1][4] - f_x_butilspirt[a][4]) /
                    (f_x_butilspirt[a + 1][0] - f_x_butilspirt[a][0])) * (
                        t_sred_cold - f_x_butilspirt[a][0])
    elif cold_solvent in ['Толуол', 'толуол']:
        for c, d in enumerate(f_x_toluol):
            if t_sred_cold == f_x_toluol[c][0]:
                plot_cold = f_x_toluol[c][2]
                viz_cold = f_x_toluol[c][3]
                teploprovod_cold = f_x_toluol[c][6]
                c_cold = f_x_toluol[c][4]
            elif t_sred_cold > f_x_toluol[c][0] and t_sred_cold < f_x_toluol[
                    c + 1][0]:
                plot_cold = f_x_toluol[c][2] + (
                    (f_x_toluol[c + 1][2] - f_x_toluol[c][2]) /
                    (f_x_toluol[c + 1][0] - f_x_toluol[c][0])) * (
                        t_sred_cold - f_x_toluol[c][0])
                teploprovod_cold = f_x_toluol[c][6] + (
                    (f_x_toluol[c + 1][6] - f_x_toluol[c][6]) /
                    (f_x_toluol[c + 1][0] - f_x_toluol[c][0])) * (
                        t_sred_cold - f_x_toluol[c][0])
                c_cold = f_x_toluol[c][4] + (
                    (f_x_toluol[c + 1][4] - f_x_toluol[c][4]) /
                    (f_x_toluol[c + 1][0] - f_x_toluol[c][0])) * (
                        t_sred_cold - f_x_toluol[c][0])
                viz_cold = f_x_toluol[c][3] + (
                    (f_x_toluol[c + 1][3] - f_x_toluol[c][3]) /
                    (f_x_toluol[c + 1][0] - f_x_toluol[c][0])) * (
                        t_sred_cold - f_x_toluol[c][0])
    elif cold_solvent in ['Метанол', 'метанол', 'метиловый спирт']:
        for c, d in enumerate(f_x_methanol):
            if t_sred_cold == f_x_methanol[c][0]:
                plot_cold = f_x_methanol[c][2]
                viz_cold = f_x_methanol[c][3]
                teploprovod_cold = f_x_methanol[c][6]
                c_cold = f_x_methanol[c][4]
            elif t_sred_cold > f_x_methanol[c][
                    0] and t_sred_cold < f_x_methanol[c + 1][0]:
                plot_cold = f_x_methanol[c][2] + (
                    (f_x_methanol[c + 1][2] - f_x_methanol[c][2]) /
                    (f_x_methanol[c + 1][0] - f_x_methanol[c][0])) * (
                        t_sred_cold - f_x_methanol[c][0])
                teploprovod_cold = f_x_methanol[c][6] + (
                    (f_x_methanol[c + 1][6] - f_x_methanol[c][6]) /
                    (f_x_methanol[c + 1][0] - f_x_methanol[c][0])) * (
                        t_sred_cold - f_x_methanol[c][0])
                c_cold = f_x_methanol[c][4] + (
                    (f_x_methanol[c + 1][4] - f_x_methanol[c][4]) /
                    (f_x_methanol[c + 1][0] - f_x_methanol[c][0])) * (
                        t_sred_cold - f_x_methanol[c][0])
                viz_cold = f_x_methanol[c][3] + (
                    (f_x_methanol[c + 1][3] - f_x_methanol[c][3]) /
                    (f_x_methanol[c + 1][0] - f_x_methanol[c][0])) * (
                        t_sred_cold - f_x_methanol[c][0])
    else:
        print('Введите вещество правильно, перезапустите код!')
        pass
    numeric_cold_new = [plot_cold, viz_cold, teploprovod_cold, c_cold]
    points_cold_new = [
        'Плотность, кг/м\u00B3', 'Вязкость, Па*с', 'Теплопроводность, Вт/м*К',
        'Теплоемкость, кДж/кг*К'
    ]
    f_x_cb = pd.DataFrame(list(zip(points_cold_new, numeric_cold_new)),
                          columns=['Пункт', 'Значение'])
    print(f_x_cb)
    # Расчет ф/x свойств воды
    print('Рассчитаем физические свойтсва воды: ')
    for c, b in enumerate(f_x_aqua):
        if t_sred_aqua == f_x_aqua[c][1]:
            plot_aqua = f_x_aqua[c][2]
            viz_aqua = f_x_aqua[c][5]
            teploprovod_aqua = f_x_aqua[c][4]
            c_aqua = f_x_aqua[c][3]
        elif t_sred_aqua > f_x_aqua[c][1] and t_sred_aqua < f_x_aqua[c + 1][1]:
            plot_aqua = f_x_aqua[c][2] + (
                (f_x_aqua[c + 1][2] - f_x_aqua[c][2]) /
                (f_x_aqua[c + 1][1] - f_x_aqua[c][1])) * (t_sred_aqua -
                                                          f_x_aqua[c][1])
            viz_aqua = f_x_aqua[c][5] + (
                (f_x_aqua[c + 1][5] - f_x_aqua[c][5]) /
                (f_x_aqua[c + 1][1] - f_x_aqua[c][1])) * (t_sred_aqua -
                                                          f_x_aqua[c][1])
            teploprovod_aqua = f_x_aqua[c][4] + (
                (f_x_aqua[c + 1][4] - f_x_aqua[c][4]) /
                (f_x_aqua[c + 1][1] - f_x_aqua[c][1])) * (t_sred_aqua -
                                                          f_x_aqua[c][1])
            c_aqua = f_x_aqua[c][3] + (
                (f_x_aqua[c + 1][3] - f_x_aqua[c][3]) /
                (f_x_aqua[c + 1][1] - f_x_aqua[c][1])) * (t_sred_aqua -
                                                          f_x_aqua[c][1])
    numeric_aqua_new = [plot_aqua, viz_aqua, teploprovod_aqua, c_aqua]
    points_aqua_new = [
        'Плотность, кг/м\u00B3', 'Вязкость, Па*с', 'Теплопроводность, Вт/м*К',
        'Теплоемкость, кДж/кг*К'
    ]
    f_x_aqua_cb = pd.DataFrame(list(zip(points_aqua_new, numeric_aqua_new)),
                               columns=['Пункт', 'Значение'])
    print(f_x_aqua_cb)
    q_cold = g_cold_solvent_kgs * c_cold * (start_temp_cold - finish_temp_cold)
    print(
        'Проведем расчет теплоты необходимой для охлаждения до заданной температуры в Вт: ',
        q_cold)
    g_aqua = q_cold / (c_aqua * (t_finish_aqua_cold - t_start_aqua_cold))
    print('Рассчитаем расход по нагреваемой среде в кг/с: ', g_aqua)
    # Выбор площади
    print(
        'Примем ориентировочное значение Re среды = 15000 - турбулентный режим и рассчитаем количество труб на один ход холодильника'
    )
    re_cold = 15000
    d_20 = 0.016
    d_25 = 0.021
    n_z_20 = math.ceil(
        (g_cold_solvent_kgs * 4) / (3.14 * d_20 * 15000 * viz_cold))
    n_z_25 = math.ceil(
        (g_cold_solvent_kgs * 4) / (3.14 * d_25 * 15000 * viz_cold))
    print(
        'Число трубок d = 20x2 мм на один ход при теор. значение Re = 15000: ',
        n_z_20)
    print(
        'Число трубок d = 25x2 мм на один ход при теор. значение Re = 15000: ',
        n_z_25)
    k_cold = 800
    print(
        'Примем ориентировочное значение коэффициента теплопередачи при турбулентном режиме: ',
        k_cold, 'Вт/м\u00B2*К')
    f_orent = q_cold / (k_cold * sred_temp)
    print('Рассчитаем ориентировочное значение площади теплоперадачи, м\u00B2',
          f_orent)
    print(
        'В многоходовых теплообменниках необходим расчет среднелогарифмической разности температур'
    )
    p_ras = (t_finish_aqua_cold - t_start_aqua_cold) / (start_temp_cold -
                                                        t_start_aqua_cold)
    p_ras_new = float(f'{p_ras:.4f}')
    print('P = ', p_ras_new)
    r_ras = (start_temp_cold - finish_temp_cold) / (t_finish_aqua_cold -
                                                    t_start_aqua_cold)
    r_ras_new = float(f'{r_ras:.3f}')
    print('R = ', r_ras_new)
    n_ras = ((r_ras**2) + 1)**0.5
    n_ras_new = float(f'{n_ras:.3f}')
    print('η = ', n_ras_new)
    d_ras = (r_ras - 1) / (math.log((1 - p_ras_new) / (1 - (r_ras_new * p_ras_new))))
    print('δ = ', d_ras)
    e_t = (n_ras / d_ras) / math.log((2 - p_ras_new * (1 + r_ras_new - n_ras_new))/(2 - p_ras_new * (1 + r_ras_new + n_ras_new)))
    print('ε = ', e_t)
    t_sred_new = e_t * sred_temp
    print('Разность средних температур с учетом поправки: ', t_sred_new)
    f_orent_new = q_cold / (k_cold * t_sred_new)
    print(
        'Ориентировочное значение площади теплоперадачи с учетом поправки, м\u00B2',
        f_orent_new)
    #выбор теплообменника из стандартных
    print(
        'Выберем наиболее подходящие теплообменные аппараты из стандартных по ГОСТ 15120-79: '
    )
    for g, h in enumerate(holodilnik_600):
        if holodilnik_600[g][5] < f_orent_new < holodilnik_600[
                g + 1][5] and f_orent_new < f_max_600_cold:
            f_6 = holodilnik_600[g + 1][5]
            l_6 = holodilnik_600[g + 1][4]
            f_600.append(f_6)
            l_tube_all_cold.append(l_6)
            d_6 = holodilnik_600[g + 1][1]
            d_tube_all_cold.append(d_6)
        else:
            pass
    print('Площадь по гост составит: ', f_600, 'м\u00B2 и диаметром кожуха',
          d_600, 'мм')
    for t, y in enumerate(holodilnik_800):
        if f_orent_new > holodilnik_800[t][5] and f_orent_new < holodilnik_800[
                t + 1][5] and f_orent_new < f_max_800_cold:
            f_8 = holodilnik_800[t + 1][5]
            f_800.append(f_8)
            l_8 = holodilnik_800[t + 1][4]
            l_tube_all_cold.append(l_8)
            d_8 = holodilnik_800[t + 1][1]
            d_tube_all_cold.append(d_8)
        else:
            pass
    print('Площадь по гост составит: ', f_800, 'м\u00B2 и диаметром кожуха',
          d_800, 'мм')
    for u, i in enumerate(holodilnik_1000):
        if f_orent_new > holodilnik_1000[u][
                5] and f_orent_new < holodilnik_1000[
                    u + 1][5] and f_orent_new < f_max_1000_cold:
            f_10 = holodilnik_1000[u + 1][5]
            f_1000.append(f_10)
            l_10 = holodilnik_1000[u + 1][4]
            l_tube_all_cold.append(l_10)
            d_10 = holodilnik_1000[u + 1][1]
            d_tube_all_cold.append(d_10)
        else:
            pass
    print('Площадь по гост составит: ', f_1000, 'м\u00B2 и диаметром кожуха',
          d_1000, 'мм')
    for o, p in enumerate(holodilnik_1200):
        if f_orent_new > holodilnik_1200[o][
                5] and f_orent_new < holodilnik_1200[
                    o + 1][5] and f_orent_new < f_max_1200_cold:
            f_12 = holodilnik_1200[o + 1][5]
            f_1200.append(f_12)
            l_12 = holodilnik_1200[o + 1][4]
            l_tube_all_cold.append(l_12)
            d_12 = holodilnik_1200[o + 1][1]
            d_tube_all_cold.append(d_12)
        else:
            pass
    print('Площадь по гост составит: ', f_1200, 'м\u00B2 и диаметром кожуха',
          d_1200, 'мм')
    f_cold_all = f_600 + f_800 + f_1000 + f_1200
    f_cold_all_fl = list(np.float_(f_cold_all))
    l_cold_all_fl = list(np.float_(l_tube_all_cold))
    d_tube_all_fl_cold = list((np.float_(d_tube_all_cold)))
    l_and_f_and_d_cold = pd.DataFrame(
        list(zip(f_cold_all_fl, l_cold_all_fl, d_tube_all_fl_cold)),
        columns=['Площадь, м\u00B2', 'Длина труб, м', 'Диаметр трубок, мм'])
    print(l_and_f_and_d_cold)
    print(
        'Дальше необходимо провести уточняющий расчет с помощью критерией Nu, Re и Pr'
    )
else:
    print('Введите тип теплообменного аппарата корректно!')